import React, {useEffect} from 'react';
import type {Node} from 'react';
import {Button, Text, View, ScrollView} from 'react-native';
import {styles} from "./styles";
import {TouchableWithoutFeedback} from "react-native";
import {TouchableOpacity} from "react-native";
import SwipeRender from "react-native-swipe-render";
import {vw} from 'react-native-expo-viewport-units';
import {DoneImage} from "../../../assets/images/done";
import {SvgXml} from "react-native-svg";
import * as SecureStore from 'expo-secure-store';


const Options: () => Node = ({navigation}) => {
  const [isHiragana, setIsHiragana] = React.useState(true);
  const [isNigory, setIsNigory] = React.useState(true);
  const [isHannagory, setIsHannagory] = React.useState(true);
  const [isIndex, setIsIndex] = React.useState(0);
  const [kanaData, setKanaData] = React.useState({
    hiragana: [['„ÅÇ','–∞', 0], ['„ÅÑ', '–∏', 0], ['„ÅÜ', '—É', 0], ['„Åà', '—ç', 0], ['„Åä', '–æ', 0], ['„Åã', '–∫–∞', 0], ['„Åç', '–∫–∏', 0],
      ['„Åè', '–∫—É', 0],['„Åë', '–∫—ç', 0], ['„Åì', '–∫–æ', 0], ['„Åï', '—Å–∞', 0], ['„Åó', '—Å–∏', 0], ['„Åô', '—Å—É', 0], ['„Åõ', '—Å—ç', 0], ['„Åù', '—Å–æ', 0],
      ['„Åü', '—Ç–∞', 0], ['„Å°', '—Ç–∏', 0], ['„Å§', '—Ü—É', 0], ['„Å¶', '—Ç—ç', 0], ['„Å®', '—Ç–æ', 0], ['„Å™', '–Ω–∞', 0], ['„Å´', '–Ω–∏', 0], ['„Å¨', '–Ω—É', 0],
      ['„Å≠', '–Ω—ç', 0], ['„ÅÆ', '–Ω–æ', 0], ['„ÅØ', '—Ö–∞', 0], ['„Å≤', '—Ö–∏', 0], ['„Åµ', '—Ñ—É', 0], ['„Å∏', '—Ö—ç', 0], ['„Åª', '—Ö–æ', 0], ['„Åæ', '–º–∞', 0],
      ['„Åø', '–º–∏', 0], ['„ÇÄ', '–º—É', 0], ['„ÇÅ', '–º—ç', 0], ['„ÇÇ', '–º–æ', 0], ['„ÇÑ', '—è', 0], ['„ÇÜ', '—é', 0], ['„Çà', '—ë', 0], [' ', ' ', 0],
      [' ', ' ', 0], ['„Çâ', '—Ä–∞', 0], ['„Çä', '—Ä–∏', 0], ['„Çã', '—Ä—É', 0], ['„Çå', '—Ä—ç', 0], ['„Çç', '—Ä–æ', 0], ['„Çè', '–≤–∞', 0], [' ', ' ', 0],
      ['„Çí', '–≤–æ', 0], [' ', ' ', 0], ['„Çì', '–Ω', 0]],
    katakana: [['„Ç¢','–∞', 0], [' „Ç§', '–∏', 0], ['„Ç¶', '—É', 0], ['„Ç®', '—ç', 0], ['„Ç™', '–æ', 0], ['„Ç´', '–∫–∞', 0], ['„Ç≠', '–∫–∏', 0],
      ['„ÇØ', '–∫—É', 0], ['„Ç±', '–∫—ç', 0], ['„Ç≥', '–∫–æ', 0], ['„Çµ', '—Å–∞', 0], ['„Ç∑', '—Å–∏', 0], ['„Çπ', '—Å—É', 0], ['„Çª', '—Å—ç', 0], ['„ÇΩ', '—Å–æ', 0],
      ['„Çø', '—Ç–∞', 0], ['„ÉÅ', '—Ç–∏', 0], ['„ÉÑ', '—Ü—É', 0], ['„ÉÜ', '—Ç—ç', 0], ['„Éà', '—Ç–æ', 0], ['„Éä', '–Ω–∞', 0], ['„Éã', '–Ω–∏', 0], ['„Éå', '–Ω—É', 0],
      ['„Éç', '–Ω—ç', 0], ['„Éé', '–Ω–æ', 0], ['„Éè', '—Ö–∞', 0], ['„Éí', '—Ö–∏', 0], ['„Éï', '—Ñ—É', 0], ['„Éò', '—Ö—ç', 0], ['„Éõ', '—Ö–æ', 0], ['„Éû', '–º–∞', 0],
      ['„Éü', '–º–∏', 0], ['„É†', '–º—É', 0], ['„É°', '–º—ç', 0], ['„É¢', '–º–æ', 0], ['„É§', '—è', 0], ['„É¶', '—é', 0], ['„É®', '—ë', 0], [' ', ' ', 0],
      [' ', ' ', 0], ['„É©', '—Ä–∞', 0], ['„É™', '—Ä–∏', 0], ['„É´', '—Ä—É', 0], ['„É¨', '—Ä—ç', 0], ['„É≠', '—Ä–æ', 0], ['„ÉØ', '–≤–∞', 0], [' ', ' ', 0],
      ['„É≤', '–≤–æ', 0], [' ', ' ', 0], ['„É≥', '–Ω', 0]],
    hiraganaNigori: [['„Åå','–≥–∞', 0], ['„Åé','–≥–∏', 0], ['„Åê','–≥—É', 0], ['„Åí','–≥—ç', 0], ['„Åî','–≥–æ', 0], ['„Åñ','–¥–∑–∞', 0], ['„Åò','–¥–∑–∏', 0],
      ['„Åö','–¥–∑—É', 0], ['„Åú','–¥–∑—ç', 0], ['„Åû','–¥–∑–æ', 0], ['„Å†','–¥–∞', 0], ['„Å¢','–¥–∑–∏', 0], ['„Å•','–¥–∑—É', 0], ['„Åß','–¥—ç', 0], ['„Å©','–¥–æ', 0],
      ['„Å∞','–±–∞', 0], ['„Å≥','–±–∏', 0], ['„Å∂','–±—É', 0], ['„Åπ','–±—ç', 0], ['„Åº','–±–æ', 0]],
    katakanaNigori: [['„Ç¨','–≥–∞', 0], ['„ÇÆ','–≥–∏', 0], ['„Ç∞','–≥—É', 0], ['„Ç≤','–≥—ç', 0], ['„Ç¥','–≥–æ', 0], ['„Ç∂','–¥–∑–∞', 0], ['„Ç∏','–¥–∑–∏', 0],
      ['„Ç∫','–¥–∑—É', 0], ['„Çº','–¥–∑—ç', 0], ['„Çæ','–¥–∑–æ', 0], ['„ÉÄ','–¥–∞', 0], ['„ÉÇ','–¥–∑–∏', 0], ['„ÉÖ','–¥–∑—É', 0], ['„Éá','–¥—ç', 0], ['„Éâ','–¥–æ', 0],
      ['„Éê','–±–∞', 0], ['„Éì','–±–∏', 0], ['„Éñ','–±—É', 0], ['„Éô','–±—ç', 0], ['„Éú','–±–æ', 0]],
    hiraganaHannogiri: [['„Å±','–ø–∞', 0], ['„Å¥','–ø–∏', 0], ['„Å∑','–ø—É', 0], ['„Å∫','–ø—ç', 0], ['„ÅΩ','–ø–æ', 0]],
    katakanaHannogiri: [['„Éë','–ø–∞', 0], ['„Éî','–ø–∏', 0], ['„Éó','–ø—É', 0], ['„Éö','–ø—ç', 0], ['„Éù','–ø–æ', 0]],
  });

  async function save(key, value) {
    await SecureStore.setItemAsync(key, JSON.stringify(value));
  }

  async function getValueFor(key) {
    let result = JSON.parse(await SecureStore.getItemAsync(key));
    if (result) {
      alert("üîê Here's your value üîê \n" + result);
    } else {
      alert('No values stored under that key.');
    }
  }

  useEffect(async () => {
    let hiragana = JSON.parse(await SecureStore.getItemAsync("hiragana"));
    let katakana = JSON.parse(await SecureStore.getItemAsync("katakana"));
    let hiraganaNigori = JSON.parse(await SecureStore.getItemAsync("hiraganaNigori"));
    let katakanaNigori = JSON.parse(await SecureStore.getItemAsync("katakanaNigori"));
    let hiraganaHannogiri = JSON.parse(await SecureStore.getItemAsync("hiraganaHannogiri"));
    let katakanaHannogiri = JSON.parse(await SecureStore.getItemAsync("katakanaHannogiri"));
    if(hiragana && katakana && hiraganaNigori && katakanaNigori &&
      hiraganaHannogiri && katakanaHannogiri){
      setKanaData({
        hiragana: hiragana,
        katakana: katakana,
        hiraganaNigori: hiraganaNigori,
        katakanaNigori: katakanaNigori,
        hiraganaHannogiri: hiraganaHannogiri,
        katakanaHannogiri: katakanaHannogiri,
      });
    }else{
      await SecureStore.setItemAsync("hiragana", JSON.stringify(kanaData.hiragana));
      await SecureStore.setItemAsync("katakana", JSON.stringify(kanaData.katakana));
      await SecureStore.setItemAsync("hiraganaNigori", JSON.stringify(kanaData.hiraganaNigori));
      await SecureStore.setItemAsync("katakanaNigori", JSON.stringify(kanaData.katakanaNigori));
      await SecureStore.setItemAsync("hiraganaHannogiri", JSON.stringify(kanaData.hiraganaHannogiri));
      await SecureStore.setItemAsync("katakanaHannogiri", JSON.stringify(kanaData.katakanaHannogiri));

    }
  });

  const listRenderer = (list) => {
    const lineRenderer = (list, num) => {
      let content = [];
      for (let i = num; i < num + 5; i++) {
        if (i >= list.length) break;

        content.push(<View key={i}
                           style={[styles.symvol, list[i][0] === ' ' ? {backgroundColor: '#e5e5e5'} : (list[i][2] < 3 ? {backgroundColor: '#FFBDBD'} : {backgroundColor: '#D4F4D3'})]}><View
          style={[styles.symvol2, {height: vw(15)}]}><Text
          style={styles.kanaLearnSymbolText}>{[list[i][0],' ',list[i][2]]}</Text></View></View>);
      }
      return (
        <View style={{flexDirection: 'row'}}>
          {content}
        </View>
      )
    }
    let content = [];
    for (let i = 0; i < list.length; i += 5) {
      content.push(<View key={i} style={styles.line}>{lineRenderer(list, i)}</View>);
    }
    return (
      <View key={98}>
        <View>
          {content}
        </View>
      </View>
    )
  }

  return (
    <View style={styles.main}>
      <View style={styles.header}>
        <Text style={styles.headerText}>Octopus</Text>
      </View>


      <View style={styles.kanaBox}>
        <View style={styles.kanaSwitsher}>
          <TouchableWithoutFeedback onPress={() =>
            setIsHiragana(true)
          }>
            <View
              style={[styles.hiraganaText, isHiragana ? {} : {borderBottomRightRadius: 16, backgroundColor: "#F0F0F0"}]}
              onPress={() => {
                alert("lol")
              }}>
              <Text style={styles.kanaHeaderText}>–•–∏—Ä–∞–≥–∞–Ω–∞</Text>
            </View>
          </TouchableWithoutFeedback>
          <TouchableWithoutFeedback onPress={() =>
            setIsHiragana(false)
          }>
            <View
              style={[styles.katakanaText, isHiragana ? {borderBottomLeftRadius: 16, backgroundColor: "#F0F0F0"} : {}]}>
              <Text style={styles.kanaHeaderText}>–ö–∞—Ç–∞–∫–∞–Ω–∞</Text>
            </View>
          </TouchableWithoutFeedback>
        </View>
        <View style={styles.progress}/>
        <View style={styles.kanaResult}>
          <View style={styles.switchHeader}>
            <Text style={styles.kanaLittleHeaderText}>{isIndex ? "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ" : "–û—Å–Ω–æ–≤–Ω—ã–µ"}</Text>
            <View style={styles.switchIndicate}>
              <View style={[styles.firstButton, isIndex ? {} : {backgroundColor: '#34ACE0'}]}/>
              <View style={[styles.secondButton, isIndex ? {backgroundColor: '#34ACE0'} : {}]}/>
            </View>
          </View>
          <SwipeRender index={0} loadMinimal={true} loadMinimalSize={2} onIndexChanged={(index) => setIsIndex(index)}>
            <View>
              <ScrollView scrollEventThrottle={16} showsVerticalScrollIndicator={false}>
                {listRenderer(isHiragana ? kanaData.hiragana  : kanaData.katakana)}
              </ScrollView>
            </View>
            <View>
              <ScrollView scrollEventThrottle={16} showsVerticalScrollIndicator={false}>
                <View key={99} style={{flex: 1}}>
                  <TouchableWithoutFeedback onPress={() => setIsNigory(!isNigory)}>
                    <View
                      style={[styles.groupName, isNigory ? {backgroundColor: "#2F80E9"} : {backgroundColor: "#CBE6F8"}]}>
                      <Text>–ù–∏–≥–æ—Ä–∏</Text>
                      <View style={styles.checkedBox}>
                        <SvgXml xml={DoneImage}/>
                      </View>
                    </View>
                  </TouchableWithoutFeedback>
                  <View>
                    {listRenderer(isHiragana ? kanaData.hiraganaNigori  : kanaData.katakanaNigori)}
                  </View>
                  <TouchableWithoutFeedback onPress={() => setIsHannagory(!isHannagory)}>
                    <View
                      style={[styles.groupName, isHannagory ? {backgroundColor: "#2F80E9"} : {backgroundColor: "#CBE6F8"}]}>
                      <Text style={styles.kanaLittleSeparateText}>–•–∞–Ω–Ω–∏–≥–æ—Ä–∏</Text>
                      <View style={styles.checkedBox}>
                        <SvgXml xml={DoneImage}/>
                      </View>
                    </View>
                  </TouchableWithoutFeedback>
                  <View>
                    {listRenderer(isHiragana ? kanaData.hiraganaHannogiri : kanaData.katakanaHannogiri)}
                  </View>
                </View>
              </ScrollView>
            </View>
          </SwipeRender>
        </View>
        <TouchableOpacity style={styles.learnButton} onPress={()=>alert("lol")}>
          <Text style={styles.kanaLearnButtonText}>–£—á–∏—Ç—å</Text>
        </TouchableOpacity>
      </View>
      <View style={styles.footer}/>
    </View>
  );
};

export default Options;
